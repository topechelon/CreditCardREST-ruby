=begin
#Credit Card API v1

#Credit Card API for authorizing and charging credit cards.

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module CreditCardRestClient
  class ChargeDetails
    attr_accessor :merchant_account_number

    attr_accessor :card_number

    attr_accessor :card_verification_number

    attr_accessor :card_expiration_date

    attr_accessor :charge_amount

    attr_accessor :charge_comment

    attr_accessor :charge_order_id

    attr_accessor :avs_name

    attr_accessor :avs_street_address1

    attr_accessor :avs_street_address2

    attr_accessor :avs_city

    attr_accessor :avs_state_abbreviation

    attr_accessor :avs_zip_code

    attr_accessor :avs_country_abbreviation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'merchant_account_number' => :'merchantAccountNumber',
        :'card_number' => :'cardNumber',
        :'card_verification_number' => :'cardVerificationNumber',
        :'card_expiration_date' => :'cardExpirationDate',
        :'charge_amount' => :'chargeAmount',
        :'charge_comment' => :'chargeComment',
        :'charge_order_id' => :'chargeOrderId',
        :'avs_name' => :'avsName',
        :'avs_street_address1' => :'avsStreetAddress1',
        :'avs_street_address2' => :'avsStreetAddress2',
        :'avs_city' => :'avsCity',
        :'avs_state_abbreviation' => :'avsStateAbbreviation',
        :'avs_zip_code' => :'avsZipCode',
        :'avs_country_abbreviation' => :'avsCountryAbbreviation'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'merchant_account_number' => :'String',
        :'card_number' => :'String',
        :'card_verification_number' => :'String',
        :'card_expiration_date' => :'DateTime',
        :'charge_amount' => :'Float',
        :'charge_comment' => :'String',
        :'charge_order_id' => :'String',
        :'avs_name' => :'String',
        :'avs_street_address1' => :'String',
        :'avs_street_address2' => :'String',
        :'avs_city' => :'String',
        :'avs_state_abbreviation' => :'String',
        :'avs_zip_code' => :'String',
        :'avs_country_abbreviation' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'merchantAccountNumber')
        self.merchant_account_number = attributes[:'merchantAccountNumber']
      end

      if attributes.has_key?(:'cardNumber')
        self.card_number = attributes[:'cardNumber']
      end

      if attributes.has_key?(:'cardVerificationNumber')
        self.card_verification_number = attributes[:'cardVerificationNumber']
      end

      if attributes.has_key?(:'cardExpirationDate')
        self.card_expiration_date = attributes[:'cardExpirationDate']
      end

      if attributes.has_key?(:'chargeAmount')
        self.charge_amount = attributes[:'chargeAmount']
      end

      if attributes.has_key?(:'chargeComment')
        self.charge_comment = attributes[:'chargeComment']
      end

      if attributes.has_key?(:'chargeOrderId')
        self.charge_order_id = attributes[:'chargeOrderId']
      end

      if attributes.has_key?(:'avsName')
        self.avs_name = attributes[:'avsName']
      end

      if attributes.has_key?(:'avsStreetAddress1')
        self.avs_street_address1 = attributes[:'avsStreetAddress1']
      end

      if attributes.has_key?(:'avsStreetAddress2')
        self.avs_street_address2 = attributes[:'avsStreetAddress2']
      end

      if attributes.has_key?(:'avsCity')
        self.avs_city = attributes[:'avsCity']
      end

      if attributes.has_key?(:'avsStateAbbreviation')
        self.avs_state_abbreviation = attributes[:'avsStateAbbreviation']
      end

      if attributes.has_key?(:'avsZipCode')
        self.avs_zip_code = attributes[:'avsZipCode']
      end

      if attributes.has_key?(:'avsCountryAbbreviation')
        self.avs_country_abbreviation = attributes[:'avsCountryAbbreviation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          merchant_account_number == o.merchant_account_number &&
          card_number == o.card_number &&
          card_verification_number == o.card_verification_number &&
          card_expiration_date == o.card_expiration_date &&
          charge_amount == o.charge_amount &&
          charge_comment == o.charge_comment &&
          charge_order_id == o.charge_order_id &&
          avs_name == o.avs_name &&
          avs_street_address1 == o.avs_street_address1 &&
          avs_street_address2 == o.avs_street_address2 &&
          avs_city == o.avs_city &&
          avs_state_abbreviation == o.avs_state_abbreviation &&
          avs_zip_code == o.avs_zip_code &&
          avs_country_abbreviation == o.avs_country_abbreviation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [merchant_account_number, card_number, card_verification_number, card_expiration_date, charge_amount, charge_comment, charge_order_id, avs_name, avs_street_address1, avs_street_address2, avs_city, avs_state_abbreviation, avs_zip_code, avs_country_abbreviation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CreditCardRestClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
